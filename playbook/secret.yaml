---
- hosts: 
  gather_facts: no
  become: yes
  vars:
    create:
      enable: yes
      force: yes # Override an existing secret
      plain_text: yes # If this is no, docker config will be used instead of the plain text secret
      secret:
        metadata:
          name: 
          namespace: 
        data:
          username: 
          password: 
          server: 
    copy:
      enable: no
      force: yes # Override an existing secret
      secret:
        name: 
        namespace_from: 
        namespace_to: 
  tasks:
  - when: create['enable']
    block:
    - when: create['plain_text']
      block:
      - when: create['force']
        block:
        - name:	check secret already exists
          shell: |
            kubectl --kubeconfig=/etc/kubernetes/admin.conf \
            get secret{{ ' -n ' + create['secret']['metadata']['namespace'] if not not create['secret']['metadata']['namespace'] else '' }} {{ create['secret']['metadata']['name'] }}
          register: result
          changed_when: false
          failed_when: false

        - name: delete secret already exists before create
          when: result['stderr'] is undefined or result['stderr'] | default('') | length == 0
          shell: |
            kubectl --kubeconfig=/etc/kubernetes/admin.conf \
            delete secret{{ ' -n ' + create['secret']['metadata']['namespace'] if not not create['secret']['metadata']['namespace'] else '' }} {{ create['secret']['metadata']['name'] }}
        
      - name: create secret with plain text
        shell: |
          kubectl --kubeconfig=/etc/kubernetes/admin.conf \
          create secret docker-registry{{ ' -n ' + create['secret']['metadata']['namespace'] if not not create['secret']['metadata']['namespace'] else '' }} {{ create['secret']['metadata']['name'] }} \
          --docker-username={{ create['secret']['data']['username'] }} \
          --docker-password={{ create['secret']['data']['password'] }} \
          {{ '--docker-server=' + create['secret']['data']['server'] if not not create['secret']['data']['server'] else '' }}

    - when: not create['plain_text']
      block:
      - name: check docker config file exists
        stat:
          path: "{{ lookup('env','HOME') }}/.docker/config.json"
        register: stat_result

      - when: create['force']
        block:
        - name:	check secret already exists
          shell: |
            kubectl --kubeconfig=/etc/kubernetes/admin.conf \
            get secret{{ ' -n ' + create['secret']['metadata']['namespace'] if not not create['secret']['metadata']['namespace'] else '' }} {{ create['secret']['metadata']['name'] }}
          register: result
          changed_when: false
          failed_when: false

        - name: delete secret already exists
          when: result['stderr'] is undefined or result['stderr'] | default('') | length == 0
          shell: kubectl --kubeconfig=/etc/kubernetes/admin.conf delete secret{{ ' -n ' + create['secret']['metadata']['namespace'] if not not create['secret']['metadata']['namespace'] else '' }} {{ create['secret']['metadata']['name'] }}

      - name: create secret from docker config file
        when: stat_result.stat.exists
        shell: |
          kubectl --kubeconfig=/etc/kubernetes/admin.conf create secret generic{{ ' -n ' + create['secret']['metadata']['namespace'] if not not create['secret']['metadata']['namespace'] else '' }} {{ create['secret']['metadata']['name'] }} \
          --from-file=.dockerconfigjson={{ lookup('env','HOME') }}/.docker/config.json \
          --type=kubernetes.io/dockerconfigjson

  - when: copy['enable']
    block:
    - when: copy['force']
      block:
      - name:	check secret already exists
        shell: |
          kubectl --kubeconfig=/etc/kubernetes/admin.conf \
          get secret{{ ' -n ' + copy['secret']['namespace_to'] if not not copy['secret']['namespace_to'] else '' }} {{ copy['secret']['name'] }}
        register: result
        changed_when: false
        failed_when: false

      - name: delete secret already exists before copy
        when: result['stderr'] is undefined or result['stderr'] | default('') | length == 0
        shell: |
          kubectl --kubeconfig=/etc/kubernetes/admin.conf \
          delete secret{{ ' -n ' + copy['secret']['namespace_to'] if not not copy['secret']['namespace_to'] else '' }} {{ copy['secret']['name'] }}

    - name: copy secret across namespaces
      shell: |
        kubectl --kubeconfig=/etc/kubernetes/admin.conf \
        get secret{{ ' -n ' + copy['secret']['namespace_from'] if not not copy['secret']['namespace_from'] else '' }} {{ copy['secret']['name'] }} -o yaml | \
        grep -v '^\s*namespace:\s' | \
        kubectl --kubeconfig=/etc/kubernetes/admin.conf \
        create{{ ' -n ' + copy['secret']['namespace_to'] if not not copy['secret']['namespace_to'] else '' }} -f -
